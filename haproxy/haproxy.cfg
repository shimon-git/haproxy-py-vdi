# Global settings
global
  daemon                                     # Run in the background as a daemon
  chroot /var/lib/haproxy                    # Change root directory to /var/lib/haproxy
  user haproxy                               # Run as user 'haproxy'
  group haproxy                              # Run as group 'haproxy'
  master-worker                              # Enable master-worker mode for HAProxy
  stats socket /var/run/haproxy.sock user haproxy group haproxy mode 660 level admin expose-fd listeners # Define stats socket with permissions

  stats socket ipv4@*:9999 user haproxy group haproxy mode 660 level admin expose-fd listeners # Define stats socket accessible via IPv4 on port 9999

  stats socket /var/run/haproxy.sock mode 666 level admin expose-fd listeners
                                              # Define additional stats socket with different permissions
  stats timeout 50s                          # Timeout for stats connections
  tune.lua.session-timeout 50s               # Timeout for Lua sessions
  log /dev/log local0                        # Log to /dev/log with facility local0
  log /dev/log local1 notice                 # Log to /dev/log with facility local1 and level notice
  lua-load /etc/haproxy/servers.lua          # Load Lua script for additional functionality

# Frontend for RDP connections
frontend dc
  mode tcp                                   # Operate in TCP mode
  bind *:3389                                # Bind to all interfaces on port 3389
  log-format "%t %ci:%cp %ft %b/%s %Tw/%Tc/%Tt %B %ts %ac/%fc/%bc/%sc/%rc %sq/%bq" # Custom log format
                                              
  log global                                 # Use global logging options
  option tcplog                              # Enable detailed TCP logging
  option dontlognull                         # Do not log null connections
  timeout client 50s                         # Set client timeout to 50 seconds
  tcp-request inspect-delay 5s               # Delay for TCP request inspection
  tcp-request content accept if RDP_COOKIE   # Accept content if RDP_COOKIE is present
  use_backend %[req.rdp_cookie(mstshash),lower,map_reg(/etc/haproxy/maps/rdp.map)] if { req.rdp_cookie(mstshash),lower,map_reg(/etc/haproxy/maps/rdp.map) -m found } # Use backend based on RDP cookie mapping
                                              

# Frontend for stats interface
frontend stats
  mode http                                  # Operate in HTTP mode
  bind *:8404                                # Bind to all interfaces on port 8404
  option dontlog-normal                      # Do not log normal, successful connections
  timeout client 30s                         # Set client timeout to 30 seconds
  stats enable                               # Enable stats page
  stats uri /stats                           # Stats URI
  stats refresh 10s                          # Refresh stats page every 10 seconds
  stats admin if LOCALHOST                   # Allow admin actions if request comes from localhost
  http-request set-log-level silent          # Silence logging for HTTP requests

# External program for API
program api
  command dataplaneapi -f /etc/haproxy/dataplaneapi.hcl # Command to run dataplaneapi with specified config file
  no option start-on-reload                  # Do not restart the program on reload

# External program for Python socket server
program python_socket
  command python3 /etc/haproxy/haproxy-py/server_socket.py      # Command to run the server_socket.py script which start the python socket for haproxy-py                                              
